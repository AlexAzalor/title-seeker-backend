services:
  db:
    image: postgres:14
    restart: always
    volumes:
      - db_data:/var/lib/postgresql/data
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-passwd}
      POSTGRES_DB: db
      PGDATABASE: db
      PGPASSWORD: ${POSTGRES_PASSWORD:-passwd}
      PGUSER: ${POSTGRES_USER:-postgres}

  app:
    image: azalor/title-hunter-backend:latest
    restart: always
    command: sh ./start_web.sh
    environment:
      APP_ENV: production
      ALCHEMICAL_DATABASE_URL: postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-passwd}@db:5432/db
    env_file:
      - .env
    volumes:
      - ./admin_key.json:/home/app/admin_key.json
    depends_on:
      - db
      - traefik
    ports:
      - "8001:8001"
    labels:
      - "traefik.enable=true"
      - 'traefik.http.routers.app.rule=Host(`admin.titleseeker.com`)'
      - "traefik.http.routers.app.entrypoints=websecure" # HTTPS
      - "traefik.http.routers.app.tls.certresolver=myresolver"
      # - "traefik.http.middlewares.static-files.stripPrefix.prefixes=/static/"
        #- "traefik.http.routers.app.entrypoints=web"
      - "traefik.http.services.app.loadbalancer.server.port=8001"

  api:
    image: azalor/title-hunter-backend:latest
    restart: always
    command: sh ./start_api.sh
    environment:
      APP_ENV: production
      IS_API: 'true'
      ALCHEMICAL_DATABASE_URL: postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-passwd}@db:5432/db
      GOOGLE_CLIENT_ID: ${GOOGLE_CLIENT_ID}
    env_file:
      - .env
    depends_on:
      - db
      - traefik
    volumes:
      - ./admin_key.json:/home/app/admin_key.json
    ports:
      - "8002:8002"
    labels:
      - "traefik.enable=true"
      - 'traefik.http.routers.api.rule=Host(`api.titleseeker.com`)'
      - "traefik.http.routers.api.entrypoints=websecure" # HTTPS
      - "traefik.http.routers.api.tls.certresolver=myresolver"
        #- "traefik.http.routers.api.entrypoints=web"
      - "traefik.http.services.api.loadbalancer.server.port=8002"

  frontend:
    image: azalor/title-hunter-frontend:latest  # Replace with your Docker Hub image
    restart: always
    build: ./title-hunt  # Make sure you have a Dockerfile inside the Next.js project
    ports:
      - "3000:3000"
    env_file:
      - .env
    depends_on:
      - traefik
    labels:
      - "traefik.enable=true" # Explicitly tell Traefik to expose this container
      - 'traefik.http.routers.frontend.rule=Host(`titleseeker.com`)' # The domain the service will respond to
      - "traefik.http.routers.frontend.entrypoints=websecure" # HTTPS
      - "traefik.http.routers.frontend.tls.certresolver=myresolver" # Uses the Host rule to define which certificate to issue
        # - "traefik.http.routers.frontend.entrypoints=web" # Allow request only from the predefined entry point named "web"
      - "traefik.http.services.frontend.loadbalancer.server.port=3000"

  traefik:
    image: "traefik:v3.3.3"
    restart: always
    command:
      - "--api.insecure=false"  # Disable insecure API
      - "--providers.docker=true"       # Enables Docker provider, allowing Traefik to discover containers dynamically.
      - "--entrypoints.web.address=:80"    # Traefik will listen to incoming request on the port 80 (HTTP)
      - "--entrypoints.websecure.address=:443"  # Traefik will listen to incoming request on the port 443 (https)
      - "--certificatesresolvers.myresolver.acme.tlschallenge=true" # Enables Docker provider, allowing Traefik to discover containers dynamically. myresolver is the name of the certificate resolver.
      - "--certificatesresolvers.myresolver.acme.email=xy55xy.azalor@gmail.com" # Required for SSL certificate issuance.
      - "--certificatesresolvers.myresolver.acme.storage=/letsencrypt/acme.json" # Tell to store the certificate on a path under our volume
      # Redirects all HTTP (port 80) traffic to HTTPS (port 443).
      - "--entrypoints.web.http.redirections.entryPoint.to=websecure"
      - "--entrypoints.web.http.redirections.entryPoint.scheme=https"
      # - "--certificatesresolvers.myresolver.acme.caServer=https://acme-staging-v02.api.letsencrypt.org/directory"  # <-- STAGING SERVER
    ports:
      - "80:80"
      - "443:443"
      # The Web UI (enabled by --api.insecure=true)
      - "8080:8080"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock" # Mounts the Docker socket so Traefik can monitor running containers dynamically.
      - "letsencrypt:/letsencrypt" # Mounts a persistent volume to store Let's Encrypt certificates.

# A volume is like a USB drive or external hard drive that stores data separately from main system. It helps keep data safe even if the container is deleted or recreated.
volumes:
  db_data:
  letsencrypt:


# ACME (Automated Certificate Management Environment) is a protocol used for automatically obtaining and renewing SSL/TLS certificates. It is the protocol behind Let's Encrypt, allowing services like Traefik to request, validate, and renew certificates without manual intervention.
# In this configuration:
# - acme.tlschallenge=true means Traefik uses the TLS Challenge method.
# - The issued certificates are stored in /letsencrypt/acme.json.
# - The email is used for Let's Encrypt notifications (expiry alerts, etc.).

# TLS
# TLS (Transport Layer Security) is a cryptographic protocol that provides secure communication over the internet. It encrypts data between a client (like a web browser) and a server to protect against eavesdropping, tampering, and forgery.

# TLS Key Features:
# - Encryption: Prevents attackers from reading transmitted data.
# - Authentication: Ensures the server is legitimate (via SSL/TLS certificates).
# - Data Integrity: Detects any modifications during transmission.
# TLS is the successor to SSL (Secure Sockets Layer) and is widely used for HTTPS (secure websites).

# A TLS Challenge is one method used in the ACME (Automated Certificate Management Environment) protocol to verify domain ownership when issuing an SSL/TLS certificate.
# Ideal for Dockerized environments where Traefik handles HTTPS directly.
# In this configuration:
# - This tells Traefik to use the TLS Challenge method for Let's Encrypt validation.
# - The certificate will be automatically obtained and renewed.
# - It eliminates the need to open port 80, relying only on port 443.
